#
# Copyright (c) ZeroC, Inc. All rights reserved.
#

# The default platform (ppc64) is listed first
supported-platforms = ppc64 ppc

supported-compilers = xlC_r xlclang++
COMPILER            ?= $(firstword $(supported-compilers))

ifneq ($(filter $(COMPILER),$(supported-compilers)),$(COMPILER))
    $(error invalid compiler $(COMPILER); the supported compilers are: $(supported-compilers))
endif

ppc_cppflags        = -q32 -D_LARGE_FILES -I/opt/freeware/include
ppc_ldflags         = $(ppc_cppflags) -L/opt/freeware/lib
ppc_targetdir       = $(if $(filter %/build,$5),/ppc,$(if $(filter-out $($1_target),program),32))

# All 32-bit programs in "bin" get the _32 suffix
ppc_targetname    = $(if $(and $(filter $(bindir)%,$($4_targetdir)),$(filter $($1_target),program)),_32)

ppc64_cppflags      = -q64 -I/opt/freeware/include
ppc64_ldflags       = $(ppc64_cppflags) -L/opt/freeware/lib
ppc64_targetdir     = $(if $(filter %/build,$5),/ppc64)

shared_cppflags     = $(if $(filter-out program,$($1_target)),-qpic,)
static_targetdir    = $(if $(and $(filter-out %/build,$5),$(filter $($1_target),program)),,static)

platform_cxx        = $(COMPILER)
platform_ld         = $(COMPILER)
platform_ar         = $(AR)

ifeq ($(COMPILER),xlC_r)
    # Used to suppress warnings in generated code
    xlc_compiler        = yes
endif

cppflags            = $(if $(filter yes,$(OPTIMIZE)),-O2 -qmaxmem=-1 -DNDEBUG,-g)

ifeq ($(COMPILER),xlC_r)
     cppflags       += -qrtti -qstaticinline -qhalt=i
else ifeq ($(COMPILER),xlclang++)
     cppflags       += -mcpu=pwr8 -Werror
     nodeprecatedwarnings-cppflags := -Wno-deprecated-declarations
endif

ifeq ($(embedded_runpath),yes)
    #
    # Our default for embedded runpath prefix on AIX is $(prefix)
    #
    ifeq ($(embedded_runpath_prefix),)
        embedded_runpath_prefix = $(prefix)
    endif
endif

depend-cppflags = -qmakedep=gcc -MF $1
rpath-ldflag    = -Wl,-blibpath:$1:/usr/lib:/opt/freeware/lib

# $(call mklib,$1=target,$2=objects,$3=libname,$4=version,$5=soversion,$6=ldflags,$7=platform)
mklib           = $(or $($7_ar),$(AR)) -X32_64 crs $1 $2

# $(call mkshlib,$1=target,$2=objects,$3=libname,$4=version,$5=soversion,$6=ldflags,$7=platform)
tmpsofile       = $(dir $1)lib$2.so$(if $3,.$3)
mkshlib         ?= $(platform_cxx) -qmkshrobj -o $(call tmpsofile,$1,$3,$5) $2 $6 && \
		   $(platform_ar) -X32_64 crs $1 $(call tmpsofile,$1,$3,$5) && \
                   rm $(call tmpsofile,$1,$3,$5)

#
# $(call mkxxx,$1=libname,$2=version,$3=soversion)
#
mkshlibfilename = lib$(1).a

mkpymodulename  = $(1).so

Ice_system_libs         = -lcrypto
IceSSL_system_libs      = -lssl -lcrypto
Glacier2CryptPermissionsVerifier_system_libs = -lcrypt

#
# We use this form instead of -liconv to avoid finding /opt/freeware/lib/libiconv.a
#
iconv_ldflags          := /usr/lib/libiconv.a

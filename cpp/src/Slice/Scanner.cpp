#line 1 "src/Slice/Scanner.cpp"
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//

#include <IceUtil/ScannerConfig.h>

#line 8 "src/Slice/Scanner.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer slice__create_buffer
#define yy_delete_buffer slice__delete_buffer
#define yy_scan_buffer slice__scan_buffer
#define yy_scan_string slice__scan_string
#define yy_scan_bytes slice__scan_bytes
#define yy_init_buffer slice__init_buffer
#define yy_flush_buffer slice__flush_buffer
#define yy_load_buffer_state slice__load_buffer_state
#define yy_switch_to_buffer slice__switch_to_buffer
#define yypush_buffer_state slice_push_buffer_state
#define yypop_buffer_state slice_pop_buffer_state
#define yyensure_buffer_stack slice_ensure_buffer_stack
#define yy_flex_debug slice__flex_debug
#define yyin slice_in
#define yyleng slice_leng
#define yylex slice_lex
#define yylineno slice_lineno
#define yyout slice_out
#define yyrestart slice_restart
#define yytext slice_text
#define yywrap slice_wrap
#define yyalloc slice_alloc
#define yyrealloc slice_realloc
#define yyfree slice_free

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define slice__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer slice__create_buffer
#endif

#ifdef yy_delete_buffer
#define slice__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer slice__delete_buffer
#endif

#ifdef yy_scan_buffer
#define slice__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer slice__scan_buffer
#endif

#ifdef yy_scan_string
#define slice__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string slice__scan_string
#endif

#ifdef yy_scan_bytes
#define slice__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes slice__scan_bytes
#endif

#ifdef yy_init_buffer
#define slice__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer slice__init_buffer
#endif

#ifdef yy_flush_buffer
#define slice__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer slice__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define slice__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state slice__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define slice__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer slice__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define slice_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state slice_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define slice_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state slice_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define slice_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack slice_ensure_buffer_stack
#endif

#ifdef yylex
#define slice_lex_ALREADY_DEFINED
#else
#define yylex slice_lex
#endif

#ifdef yyrestart
#define slice_restart_ALREADY_DEFINED
#else
#define yyrestart slice_restart
#endif

#ifdef yylex_init
#define slice_lex_init_ALREADY_DEFINED
#else
#define yylex_init slice_lex_init
#endif

#ifdef yylex_init_extra
#define slice_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra slice_lex_init_extra
#endif

#ifdef yylex_destroy
#define slice_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy slice_lex_destroy
#endif

#ifdef yyget_debug
#define slice_get_debug_ALREADY_DEFINED
#else
#define yyget_debug slice_get_debug
#endif

#ifdef yyset_debug
#define slice_set_debug_ALREADY_DEFINED
#else
#define yyset_debug slice_set_debug
#endif

#ifdef yyget_extra
#define slice_get_extra_ALREADY_DEFINED
#else
#define yyget_extra slice_get_extra
#endif

#ifdef yyset_extra
#define slice_set_extra_ALREADY_DEFINED
#else
#define yyset_extra slice_set_extra
#endif

#ifdef yyget_in
#define slice_get_in_ALREADY_DEFINED
#else
#define yyget_in slice_get_in
#endif

#ifdef yyset_in
#define slice_set_in_ALREADY_DEFINED
#else
#define yyset_in slice_set_in
#endif

#ifdef yyget_out
#define slice_get_out_ALREADY_DEFINED
#else
#define yyget_out slice_get_out
#endif

#ifdef yyset_out
#define slice_set_out_ALREADY_DEFINED
#else
#define yyset_out slice_set_out
#endif

#ifdef yyget_leng
#define slice_get_leng_ALREADY_DEFINED
#else
#define yyget_leng slice_get_leng
#endif

#ifdef yyget_text
#define slice_get_text_ALREADY_DEFINED
#else
#define yyget_text slice_get_text
#endif

#ifdef yyget_lineno
#define slice_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno slice_get_lineno
#endif

#ifdef yyset_lineno
#define slice_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno slice_set_lineno
#endif

#ifdef yywrap
#define slice_wrap_ALREADY_DEFINED
#else
#define yywrap slice_wrap
#endif

/* %endif */

#ifdef yyget_lval
#define slice_get_lval_ALREADY_DEFINED
#else
#define yyget_lval slice_get_lval
#endif

#ifdef yyset_lval
#define slice_set_lval_ALREADY_DEFINED
#else
#define yyset_lval slice_set_lval
#endif

#ifdef yyget_lloc
#define slice_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc slice_get_lloc
#endif

#ifdef yyset_lloc
#define slice_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc slice_set_lloc
#endif

#ifdef yyalloc
#define slice_alloc_ALREADY_DEFINED
#else
#define yyalloc slice_alloc
#endif

#ifdef yyrealloc
#define slice_realloc_ALREADY_DEFINED
#else
#define yyrealloc slice_realloc
#endif

#ifdef yyfree
#define slice_free_ALREADY_DEFINED
#else
#define yyfree slice_free
#endif

/* %if-c-only */

#ifdef yytext
#define slice_text_ALREADY_DEFINED
#else
#define yytext slice_text
#endif

#ifdef yyleng
#define slice_leng_ALREADY_DEFINED
#else
#define yyleng slice_leng
#endif

#ifdef yyin
#define slice_in_ALREADY_DEFINED
#else
#define yyin slice_in
#endif

#ifdef yyout
#define slice_out_ALREADY_DEFINED
#else
#define yyout slice_out
#endif

#ifdef yy_flex_debug
#define slice__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug slice__flex_debug
#endif

#ifdef yylineno
#define slice_lineno_ALREADY_DEFINED
#else
#define yylineno slice_lineno
#endif

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define slice_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int32_t yy_accept[229] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   53,   50,
       47,   48,   47,   51,    1,   51,   51,   51,   19,   19,
       51,   46,   34,   51,   50,   47,   47,   28,   25,   25,
       26,   24,   25,   25,   25,   32,   47,   33,   32,   47,
       28,   40,   43,   36,   40,   44,   38,   28,   37,   44,
       28,   41,   47,   41,   42,   47,   28,   52,   15,    3,
        3,   18,    3,   17,    3,    3,   47,   48,    0,   19,
       19,   20,   23,   22,   20,   19,    0,    0,    0,    0,
       45,   46,    0,   46,    0,   35,   46,    0,   47,   28,

       28,   30,    0,   25,   25,   26,   27,   22,   25,   25,
       25,   25,   25,   32,   23,   22,   30,   32,   43,   39,
       41,    0,   47,   23,   22,   47,   28,   28,   30,   41,
        3,    3,    3,    3,   16,    4,    5,    8,    6,   14,
        2,    7,   13,   10,    3,    3,    3,    3,    3,    0,
       20,   22,   21,    0,   20,   19,   49,    0,    0,   22,
       21,   25,   25,   22,   21,   32,   22,   22,   21,    0,
       41,    3,    3,    8,   14,   14,    0,   13,   13,    9,
        3,    3,    0,   20,   21,    0,    0,   21,   25,   25,
       21,   32,   21,   21,   41,   41,    3,    8,   14,    2,

       13,    9,    3,    0,   31,   29,   25,   25,   25,   29,
       41,    0,   31,   29,   14,   13,    3,    0,   25,    0,
       14,   11,    3,   14,   14,   14,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    6,    6,    9,   10,
        6,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    6,    6,
        6,    6,   21,    6,   22,   22,   22,   22,   23,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   26,   25,   25,   25,   25,   25,
       27,   28,   29,    6,   30,    6,   31,   31,   22,   22,

       32,   33,   25,   25,   34,   25,   25,   35,   25,   36,
       25,   25,   25,   37,   25,   37,   38,   37,   25,   39,
       25,   25,    6,    6,    6,    6,   40,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   42,   41,   41,   41,
       43,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   44,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41
    } ;

static const YY_CHAR yy_meta[45] =
    {   0,
        1,    2,    3,    2,    2,    4,    1,    4,    4,    5,
        6,    4,    4,    4,    4,    4,    7,    7,    7,    5,
        4,    8,    8,    8,    9,    9,   10,   11,   10,   12,
        8,    8,    8,    9,    9,    9,    9,    9,    9,    1,
        4,    4,    4,    4
    } ;

static const flex_int32_t yy_base[260] =
    {   0,
        0,   43,   50,   65,  324,   54,  323,   55,   75,   80,
       98,  126,  154,  182,  210,  238,  267,  307,  362, 1370,
       45,  356,   70, 1370, 1370,   75,   89,   93,  333,  100,
      335,  371,  326,    0,  307,  108,  133,  145,    0,  141,
      342,  325,  110,  164,  174,    0,  147, 1370,  128,  169,
      199, 1370,  331, 1370,  149, 1370,  293,  203, 1370,  183,
      231,  198,  223,  271, 1370,  227,  398, 1370, 1370,  251,
       85, 1370,  275,  427,  255,  465,  276,  318,  271,    0,
      281,  484, 1370,  301,    0,  301,  313,    0,  274,  334,
     1370,  516,  281,    0,    0, 1370,    0,  254,  338,  352,

      361,  390,  259,    0,  301,  289, 1370,  208,  356,  408,
      433,  454,  251,    0,    0,  381,  472,  250,  249, 1370,
      324,  416,  426,  435,  483,  490,  543,  577,  520,  509,
      474,   93,  118,  612, 1370, 1370, 1370,   47, 1370,  636,
      223, 1370,  659,    0,  547,  697,  731,  552,  260,  571,
     1370,    0,    0,  387,  574,    0, 1370,  417,  209,  219,
      212,  525,  171,  561,  570,  161,  582,  595,  600,  613,
      621,  702,  706,  164,  750,    0,  168,  773,    0,    0,
      628,  410,  487,  632,    0,  181,  122,  137,  129,   92,
      632,   79,  637,  716,  724,  720,  737, 1370,  796,   58,

      819, 1370,  527,   64, 1370,  173,  199,    0,  242,  256,
      857,  861,  641,  684,  874,  897,  752,  922,  940,  944,
      947, 1370,  972,  975,  998, 1021, 1370, 1370, 1060, 1072,
     1084, 1096, 1108, 1120, 1131, 1136, 1148, 1160, 1172, 1183,
     1195, 1207, 1213, 1221, 1233, 1245, 1257, 1263, 1271, 1283,
     1295, 1307, 1319,   49,   37, 1325, 1333, 1345, 1357
    } ;

static const flex_int32_t yy_def[260] =
    {   0,
      228,    1,  229,  229,    1,    1,    1,    1,  230,  230,
      231,  231,  232,  232,  233,  233,  234,  234,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  235,  228,  236,  228,  228,  228,  228,  237,  237,
      228,  228,  237,  237,  237,  238,  228,  228,  238,  228,
      238,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  239,  239,  239,  228,  239,  239,  228,  228,  240,
      240,  228,  240,  241,  240,  240,  228,  228,  228,   29,
      228,  228,  228,  242,   82,  228,  228,  243,  236,  228,
      228,  235,  228,   92,  236,  228,   92,  228,  228,  228,

      228,  228,  228,  237,  237,  228,  228,  244,  237,  237,
      237,  237,  237,  238,  238,  245,  238,  238,  228,  228,
      239,  239,  239,  239,  246,  239,  239,  239,  239,  239,
      240,  240,  240,  247,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  248,  240,  240,  240,  240,  240,  228,
      228,  242,  249,  228,  228,  243,  228,  228,  228,  244,
      250,  237,  237,  245,  251,  238,  246,  246,  252,  239,
      239,  247,  253,  228,  228,  254,  228,  228,  255,  256,
      240,  240,  228,  228,  249,  257,  228,  250,  258,  237,
      251,  238,  252,  252,  259,  239,  253,  228,  228,  228,

      228,  228,  240,  257,  228,  228,  258,  237,  237,  238,
      259,  259,  239,  239,  228,  228,  240,  228,  237,  239,
      228,  228,  240,  228,  228,  228,  228,    0,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228
    } ;

static const flex_int32_t yy_nxt[1415] =
    {   0,
       20,   21,   22,   21,   23,   24,   25,   24,   24,   24,
       24,   26,   24,   26,   27,   28,   29,   30,   30,   31,
       24,   32,   32,   32,   32,   32,   33,   34,   24,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   24,
       20,   20,   20,   35,   36,  179,   77,   37,   77,   77,
       38,   40,   41,   40,   40,   36,   36,  176,   37,   37,
       42,   38,   38,  174,  174,   43,   44,   41,   40,   44,
      205,   77,   45,   77,   77,   42,   47,   48,   47,   47,
       43,   50,   48,   47,   50,  177,  228,   51,  228,   79,
       49,   80,   81,   81,  228,   49,  228,   20,   20,   47,

       53,   47,   47,   83,   54,   82,   82,   82,   84,   99,
      210,   77,   99,   55,   85,  100,   81,   81,   81,  228,
       83,  228,   87,  209,   56,  108,   57,   50,   53,   47,
       50,   87,   54,   58,   99,  208,   77,   99,  115,  204,
      100,   55,  105,  116,  105,  105,  101,  185,   77,  101,
       77,   77,   56,  206,   57,   47,   53,   47,   47,   83,
       54,  102,  102,  102,   84,  109,   59,  105,  109,   60,
       99,  110,   77,   99,  218,  111,  100,  218,  111,  103,
      198,  198,   57,   50,   53,   47,   50,  205,   54,   61,
      112,  112,  112,   83,   59,  200,  192,   60,   84,  122,

      101,  122,  122,  101,  101,  208,  190,  101,  113,  204,
       57,   63,   53,   63,   63,  117,  117,  117,  152,  102,
      102,  102,  185,  161,  123,   64,  123,  123,  126,  152,
      123,  126,  101,  118,  127,  101,   56,  103,   65,   66,
       53,   63,   66,  219,  187,   67,  219,  102,  102,  102,
      177,  119,   77,   64,   77,  131,   99,  218,   77,  145,
      218,  228,  146,  228,   56,  103,   65,   68,   47,   69,
       47,   70,  122,   72,  122,  122,  228,   77,  228,   77,
       77,  124,   73,  166,  163,  133,  125,   82,   82,   82,
      134,  106,  159,  182,   74,   85,  157,   81,   81,   81,

       89,   95,  105,   87,  105,  105,   68,   68,   50,   69,
       47,   75,   87,   72,   76,   85,  153,   86,   86,   81,
       78,  120,   73,   87,  154,  122,  154,  122,  122,  155,
      155,  155,   87,  119,   74,   90,   90,   90,   90,   99,
      107,   77,   99,   91,  106,  100,   68,   85,   98,   86,
       86,   81,   96,  101,   89,   87,  101,  109,   78,  105,
      109,  228,  101,  110,   87,  101,   20,   20,  102,  102,
      102,   88,   90,   90,   90,   90,  228,  102,  102,  102,
       91,  228,  152,  228,  152,  152,  103,   92,   92,   92,
       93,  158,  228,  228,  158,  103,  165,  228,   95,  128,

      228,  122,  128,  155,  155,  155,  102,  102,  102,  111,
      228,  228,  111,  228,  129,  129,  129,  122,  158,  122,
      122,  158,  228,  186,  112,  112,  112,  123,  228,  123,
      123,  228,  130,  136,  111,  137,  122,  111,  122,  122,
      228,  228,  113,  138,  138,  203,  228,  139,  228,  112,
      112,  112,  140,  228,  141,  162,  228,  142,  162,  142,
      228,  228,  142,  142,  143,  144,  101,  113,  228,  147,
      112,  112,  112,  158,  228,   77,  158,   77,  131,  228,
      228,  148,  148,  148,  168,  228,  168,  168,  117,  117,
      117,  126,  228,  123,  126,  228,  228,  127,  169,  149,

       82,   82,   82,  184,  184,  184,  150,  151,  228,  152,
      122,  152,  122,  122,  228,  150,  151,   90,   90,   90,
       90,  170,  228,  122,  170,   91,  162,  228,  228,  162,
      228,  189,   92,   92,   92,   93,  129,  129,  129,  228,
      228,  228,  171,   95,  128,  228,  122,  128,   99,  228,
       77,  145,  228,  158,  146,  228,  181,  228,  217,  129,
      129,  129,  152,  228,  152,  152,  228,  228,  148,  148,
      148,  185,  228,  185,  185,  228,  228,  130,  128,  228,
      122,  128,  183,  168,  183,  168,  168,  184,  184,  184,
      155,  155,  155,  129,  129,  129,  168,  151,  168,  168,

      228,  194,  228,  194,  194,  228,  151,  228,  152,  228,
      152,  130,  152,  152,  170,  152,  122,  170,  152,  195,
      228,  152,  122,  152,  122,  122,  185,  173,  185,  158,
      228,  228,  181,  185,  186,  185,  185,  228,  194,  152,
      194,  194,  122,  228,  122,  122,  228,  228,  184,  184,
      184,  152,  175,  175,  175,  151,  196,  175,  175,  175,
      176,  176,  228,  185,  151,  185,  175,  175,  175,  176,
      176,  176,  176,  176,  176,  178,  178,  178,  228,  228,
      178,  178,  178,  179,  179,  220,  228,  122,  220,  178,
      178,  178,  179,  179,  179,  179,  179,  179,  101,  228,

      228,  147,  152,  152,  228,  152,  185,  185,  152,  185,
      228,  228,  185,  148,  148,  148,  228,  194,  228,  194,
      194,  122,  228,  122,  122,  212,  228,  212,  212,  152,
      213,  149,  101,  185,  228,  147,  228,  185,  185,  228,
      185,  152,  185,  185,  185,  185,  228,  148,  148,  148,
      204,  214,  204,  218,  228,  228,  223,  228,  228,  228,
      228,  228,  228,  228,  185,  149,  199,  199,  199,  228,
      228,  199,  199,  199,  176,  176,  185,  228,  228,  228,
      199,  199,  199,  176,  176,  176,  176,  176,  176,  201,
      201,  201,  228,  228,  201,  201,  201,  179,  179,  228,

      228,  228,  228,  201,  201,  201,  179,  179,  179,  179,
      179,  179,  215,  215,  215,  228,  228,  215,  215,  215,
      176,  176,  228,  228,  228,  228,  215,  215,  215,  176,
      176,  176,  176,  176,  176,  216,  216,  216,  228,  228,
      216,  216,  216,  179,  179,  228,  228,  228,  228,  216,
      216,  216,  179,  179,  179,  179,  179,  179,  212,  228,
      212,  212,  212,  213,  212,  212,  228,  213,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  204,  228,  204,  228,  204,  228,  204,
      221,  221,  221,  228,  228,  221,  221,  221,  176,  176,

      228,  228,  228,  228,  221,  221,  221,  176,  176,  176,
      176,  176,  176,  222,  222,  222,  228,  228,  222,  222,
      222,  179,  179,  218,  228,  228,  218,  222,  222,  222,
      179,  179,  179,  179,  179,  179,  228,  228,  102,  102,
      102,  219,  228,  228,  219,  220,  228,  122,  220,  228,
      228,  228,  228,  228,  228,  228,  112,  112,  112,  228,
      129,  129,  129,  224,  224,  224,  228,  228,  224,  224,
      224,  176,  176,  218,  228,  228,  223,  224,  224,  224,
      176,  176,  176,  176,  176,  176,  228,  228,  148,  148,
      148,  225,  225,  225,  228,  228,  225,  225,  225,  176,

      176,  228,  228,  228,  228,  225,  225,  225,  176,  176,
      176,  176,  176,  176,  226,  226,  226,  228,  228,  226,
      226,  226,  176,  176,  228,  228,  228,  228,  226,  226,
      226,  176,  176,  176,  176,  176,  176,  227,  227,  227,
      228,  228,  227,  227,  227,  176,  176,  228,  228,  228,
      228,  227,  227,  227,  176,  176,  176,  176,  176,  176,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   94,   94,  228,   94,  228,   94,   94,   94,
      228,   94,   94,   97,   97,  228,  228,   97,  104,  104,
      228,  104,  104,  228,  104,  104,  104,  104,  104,  104,
      114,  228,  228,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  121,  121,  228,  121,  121,  121,  121,  121,
      121,  228,  121,  121,  132,  228,  132,  132,  132,  132,
      132,  132,  132,  228,  132,  135,  135,  228,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  152,  152,  228,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  156,
      156,  160,  160,  228,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  164,  164,  228,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  167,  167,  228,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  172,  172,  228,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  180,
      180,  185,  185,  228,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  188,  188,  228,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  191,  191,  228,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  193,  193,  228,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  197,
      197,  228,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  202,  202,  204,  204,  228,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  207,  207,  228,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  211,  211,  228,
      211,  211,  211,  211,  211,  211,  211,  211,  211,   19,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228
    } ;

static const flex_int32_t yy_chk[1415] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,  255,   21,    2,   21,   21,
        2,    3,    3,    3,    3,    6,    8,  254,    6,    8,
        3,    6,    8,  138,  138,    3,    4,    4,    4,    4,
      204,   23,    4,   23,   23,    4,    9,    9,    9,    9,
        4,   10,   10,   10,   10,  200,   71,   10,   71,   26,
        9,   26,   26,   26,  132,   10,  132,    6,    8,   11,

       11,   11,   11,   28,   11,   27,   27,   27,   28,   36,
      192,   36,   36,   11,   30,   36,   30,   30,   30,  133,
       43,  133,   30,  190,   11,   43,   11,   12,   12,   12,
       12,   30,   12,   12,   37,  189,   37,   37,   49,  189,
       37,   12,   40,   49,   40,   40,   38,  188,   47,   38,
       47,   47,   12,  187,   12,   13,   13,   13,   13,   55,
       13,   38,   38,   38,   55,   44,   13,   44,   44,   13,
       50,   44,   50,   50,  206,   45,   50,  206,   45,   38,
      174,  174,   13,   14,   14,   14,   14,  186,   14,   14,
       45,   45,   45,   60,   14,  177,  166,   14,   60,   62,

       51,   62,   62,   51,   58,  207,  163,   58,   45,  207,
       14,   15,   15,   15,   15,   51,   51,   51,  108,   58,
       58,   58,  161,  108,   63,   15,   63,   63,   66,  160,
       66,   66,   61,   51,   66,   61,   15,   58,   15,   16,
       16,   16,   16,  209,  159,   16,  209,   61,   61,   61,
      141,  119,   70,   16,   70,   70,   75,  210,   75,   75,
      210,  149,   75,  149,   16,   61,   16,   17,   17,   17,
       17,   17,   64,   17,   64,   64,   73,   77,   73,   77,
       77,   64,   17,  118,  113,   73,   64,   79,   79,   79,
       73,  106,  103,  149,   17,   81,   98,   81,   81,   81,

       93,   89,  105,   81,  105,  105,   17,   18,   18,   18,
       18,   18,   81,   18,   18,   86,   84,   86,   86,   86,
       78,   57,   18,   86,   87,  121,   87,  121,  121,   87,
       87,   87,   86,   53,   18,   90,   90,   90,   90,   99,
       42,   99,   99,   90,   41,   99,   18,   29,   35,   29,
       29,   29,   33,  100,   31,   29,  100,  109,   22,  109,
      109,   19,  101,  109,   29,  101,    7,    5,  100,  100,
      100,   29,   32,   32,   32,   32,    0,  101,  101,  101,
       32,    0,  116,    0,  116,  116,  100,   32,   32,   32,
       32,  102,    0,    0,  102,  101,  116,    0,   32,   67,

        0,   67,   67,  154,  154,  154,  102,  102,  102,  110,
        0,  182,  110,  182,   67,   67,   67,  122,  158,  122,
      122,  158,    0,  158,  110,  110,  110,  123,    0,  123,
      123,    0,   67,   74,  111,   74,  124,  111,  124,  124,
        0,    0,  110,   74,   74,  182,    0,   74,    0,  111,
      111,  111,   74,    0,   74,  112,    0,   74,  112,   74,
        0,    0,   74,   74,   74,   74,   76,  111,   76,   76,
      112,  112,  112,  117,    0,  131,  117,  131,  131,    0,
        0,   76,   76,   76,  125,    0,  125,  125,  117,  117,
      117,  126,    0,  126,  126,    0,    0,  126,  125,   76,

       82,   82,   82,  183,  183,  183,   82,   82,    0,  125,
      130,  125,  130,  130,    0,   82,   82,   92,   92,   92,
       92,  129,    0,  129,  129,   92,  162,    0,  203,  162,
      203,  162,   92,   92,   92,   92,  129,  129,  129,    0,
        0,    0,  130,   92,  127,    0,  127,  127,  145,    0,
      145,  145,    0,  148,  145,  148,  148,    0,  203,  127,
      127,  127,  164,    0,  164,  164,    0,    0,  148,  148,
      148,  165,    0,  165,  165,    0,    0,  127,  128,    0,
      128,  128,  150,  167,  150,  167,  167,  150,  150,  150,
      155,  155,  155,  128,  128,  128,  168,  155,  168,  168,

        0,  169,    0,  169,  169,    0,  155,    0,  167,    0,
      167,  128,  134,  134,  170,  134,  170,  170,  134,  170,
        0,  168,  171,  168,  171,  171,  169,  134,  169,  181,
        0,  181,  181,  191,  181,  191,  191,    0,  193,  134,
      193,  193,  213,    0,  213,  213,    0,    0,  184,  184,
      184,  134,  140,  140,  140,  184,  171,  140,  140,  140,
      140,  140,    0,  193,  184,  193,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  143,  143,  143,    0,    0,
      143,  143,  143,  143,  143,  214,    0,  214,  214,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  146,    0,

      146,  146,  172,  172,    0,  172,  173,  173,  172,  173,
        0,    0,  173,  146,  146,  146,    0,  194,    0,  194,
      194,  196,    0,  196,  196,  195,    0,  195,  195,  172,
      195,  146,  147,  173,  147,  147,    0,  197,  197,    0,
      197,  172,  194,  197,  194,  173,    0,  147,  147,  147,
      195,  196,  195,  217,    0,  217,  217,    0,    0,    0,
        0,    0,    0,    0,  197,  147,  175,  175,  175,    0,
        0,  175,  175,  175,  175,  175,  197,    0,    0,    0,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      178,  178,    0,    0,  178,  178,  178,  178,  178,    0,

        0,    0,    0,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  199,  199,  199,    0,    0,  199,  199,  199,
      199,  199,    0,    0,    0,    0,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  201,  201,  201,    0,    0,
      201,  201,  201,  201,  201,    0,    0,    0,    0,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  211,    0,
      211,  211,  212,  211,  212,  212,    0,  212,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  211,    0,  211,    0,  212,    0,  212,
      215,  215,  215,    0,    0,  215,  215,  215,  215,  215,

        0,    0,    0,    0,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  216,  216,  216,    0,    0,  216,  216,
      216,  216,  216,  218,    0,    0,  218,  216,  216,  216,
      216,  216,  216,  216,  216,  216,    0,    0,  218,  218,
      218,  219,    0,    0,  219,  220,    0,  220,  220,    0,
        0,    0,    0,    0,    0,    0,  219,  219,  219,    0,
      220,  220,  220,  221,  221,  221,    0,    0,  221,  221,
      221,  221,  221,  223,    0,  223,  223,  221,  221,  221,
      221,  221,  221,  221,  221,  221,    0,    0,  223,  223,
      223,  224,  224,  224,    0,    0,  224,  224,  224,  224,

      224,    0,    0,    0,    0,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  225,  225,  225,    0,    0,  225,
      225,  225,  225,  225,    0,    0,    0,    0,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  226,  226,  226,
        0,    0,  226,  226,  226,  226,  226,    0,    0,    0,
        0,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  235,  235,    0,  235,    0,  235,  235,  235,
        0,  235,  235,  236,  236,    0,    0,  236,  237,  237,
        0,  237,  237,    0,  237,  237,  237,  237,  237,  237,
      238,    0,    0,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  239,  239,    0,  239,  239,  239,  239,  239,
      239,    0,  239,  239,  240,    0,  240,  240,  240,  240,
      240,  240,  240,    0,  240,  241,  241,    0,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  242,  242,    0,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  243,
      243,  244,  244,    0,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  245,  245,    0,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  246,  246,    0,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  247,  247,    0,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  248,
      248,  249,  249,    0,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  250,  250,    0,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  251,  251,    0,  251,  251,

      251,  251,  251,  251,  251,  251,  251,  252,  252,    0,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  253,
      253,    0,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  256,  256,  257,  257,    0,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  258,  258,    0,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  259,  259,    0,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int32_t yy_rule_linenum[52] =
    {   0,
      135,  149,  150,  157,  158,  159,  166,  185,  198,  208,
      215,  216,  228,  229,  237,  248,  258,  266,  284,  298,
      326,  331,  334,  340,  341,  346,  352,  371,  376,  382,
      383,  398,  403,  411,  416,  432,  443,  447,  452,  458,
      469,  476,  483,  488,  494,  531,  541,  544,  551,  555,
      569
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/Slice/Scanner.l"

#line 11 "src/Slice/Scanner.l"

#include <Slice/GrammarUtil.h>
#include <Slice/Grammar.h>
#include <IceUtil/InputUtil.h>

#include <iomanip>

#include <stdlib.h>
#include <math.h>

#ifdef _MSC_VER
#   ifdef slice_wrap
#      undef slice_wrap
#      define slice_wrap() 1
#   endif
#endif

using namespace std;
using namespace Slice;

namespace Slice
{

// Definitions for the case-insensitive keyword-token map.
map<string, int> keywordMap;

int checkKeyword(string&);
int checkIsScoped(const string&);

}

// Stores the scanner's current column position. Flex also automatically
// generates 'yylineno', which stores the scanner's current line number.
int yycolno = 0;
// Stores a copy of the filename that the scanner is currently scanning.
shared_ptr<string> yyfilename;

namespace
{

void nextLine(int = 1);
int scanPosition(const char*);
void setLocation(TokenContext*);
void startLocation(TokenContext*);
void endLocation(TokenContext*);

void initScanner();
void preAction();
void yynoreturn fatalError(const char* msg);

}

// Override some of the functions flex auto-generates with our own implementations.
#define YY_USER_INIT initScanner();
#define YY_USER_ACTION preAction();
#define YY_FATAL_ERROR(msg) fatalError(msg);

#line 1273 "src/Slice/Scanner.cpp"
#line 71 "src/Slice/Scanner.l"
  /* Changes the default prefix of 'yy' to 'slice_' for functions and variables in the generated code. */
  /* Instructs flex to not suppress any warnings when generating the scanner. */
  /* Instructs flex to generate a scanner that supports verbose outputting (debug mode). */
  /* By default flex will 'default match' any text it encounters that doesn't match any specified rules. This
   * option disables default-matching (it throws 'scanner jammed' instead) to make grammar holes more obvious. */
  /* Directs flex to generate a scanner tailored for use by bison, and that supports bison's token location mechanism.
   * These options change the signature of the main lexing function, which must match the one declared in Grammar.y */
  /* Enables the use of flex's built in start-condition state stack. */
  /* Ensures flex generates a scanner that supports reading 8-bit characters. */
  /* Directs flex to generate lookup tables that are better aligned in memory to
   * improve access speeds, even if this means allocating larger tables. */
  /* Enables batching for improved performance. */
  /* Directs flex to store matched text as 'char *' instead of char arrays, for improved performance. */
  /* Disables the scanner's interactive modes for improved performance. */
  /* Disables the generation of functions we don't use to reduce clutter, and possibly improve performance. */
#define YY_NO_INPUT 1
  /* List of start-condition states the scanner can be in. This lets the scanning be context dependent. */








  /* The scanner also has a built in 'INITIAL' start-condition state, which is the state the scanner is initialized in.
   * We use it solely to check for and consume any BOMs at the start of files. See Bug 3140. */
#line 1302 "src/Slice/Scanner.cpp"

#define INITIAL 0
#define C_COMMENT 1
#define PRE_SLICE 2
#define SLICE 3
#define PREPROCESS 4
#define METADATA 5
#define QUOTED_METADATA 6
#define UNQUOTED_METADATA 7
#define STRING_LITERAL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

/* %if-bison-bridge */

void yyset_lval ( YYSTYPE * yylval_param  );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param );

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
        YYSTYPE * yylval;
    
        YYLTYPE * yylloc;
    
    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 131 "src/Slice/Scanner.l"


  /* ========== Literals ========== */
  /* Matches the start of a double-quoted string literal. */
#line 1595 "src/Slice/Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 229 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 228 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 52 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 52 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 53 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "src/Slice/Scanner.l"
{
    yy_push_state(STRING_LITERAL);
    startLocation(yylloc);

    StringTokPtr str = new StringTok;
    str->literal = "\"";
    *yylval = str;
}
	YY_BREAK
/* Matches a single escaped backslash, or as many characters as it can,
   * except backslashes, new-lines, double quotes, and non-printable ASCII characters. */
/* Matches Escaped backslashes and any other valid string characters. Invalid characters are
   * new-lines, non-printable ASCII characters, and double-quotes. */
case 2:
#line 150 "src/Slice/Scanner.l"
case 3:
YY_RULE_SETUP
#line 150 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += yytext;
}
	YY_BREAK
/* Matches an escaped double-quote, single-quote, or question mark. */
case 4:
#line 158 "src/Slice/Scanner.l"
case 5:
#line 159 "src/Slice/Scanner.l"
case 6:
YY_RULE_SETUP
#line 159 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += yytext[1];
}
	YY_BREAK
/* Matches an ANSI-C escape code pattern. */
case 7:
YY_RULE_SETUP
#line 166 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    char ansiCode;
    switch(yytext[1])
    {
        case 'a': ansiCode = '\a'; break;
        case 'b': ansiCode = '\b'; break;
        case 'f': ansiCode = '\f'; break;
        case 'n': ansiCode = '\n'; break;
        case 'r': ansiCode = '\r'; break;
        case 't': ansiCode = '\t'; break;
        case 'v': ansiCode = '\v'; break;
        default: ansiCode = '\0'; assert(false);
    }
    str->literal += yytext;
    str->v += ansiCode;
}
	YY_BREAK
/* Matches an escaped octal value. Octal literals are limited to a max of 3 digits. */
case 8:
YY_RULE_SETUP
#line 185 "src/Slice/Scanner.l"
{
    auto value = strtoull((yytext + 1), 0, 8);
    if(value > 255)
    {
        unit->error("octal escape sequence out of range: `\\" + string(yytext + 1) + "'");
    }

    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += static_cast<char>(value);
}
	YY_BREAK
/* Matches an escaped hexadecimal value. Hexadecimal literals are limited to a max of 2 digits. */
case 9:
YY_RULE_SETUP
#line 198 "src/Slice/Scanner.l"
{
    auto value = strtoull((yytext + 2), 0, 16);
    assert(value <= 255);

    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += static_cast<char>(value);
}
	YY_BREAK
/* Matches an empty hexadecimal escape value. */
case 10:
YY_RULE_SETUP
#line 208 "src/Slice/Scanner.l"
{
    unit->error("no hex digit in hex escape sequence");
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
}
	YY_BREAK
/* Matches a 4-char or 8-char size universal character code. */
case 11:
#line 216 "src/Slice/Scanner.l"
case 12:
YY_RULE_SETUP
#line 216 "src/Slice/Scanner.l"
{
    auto codePoint = strtoull((yytext + 2), 0, 16);
    if(codePoint <= 0xdfff && codePoint >= 0xd800)
    {
        unit->error("a universal character name cannot designate a surrogate: `" + string(yytext) + "'");
    }
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += yytext;
}
	YY_BREAK
/* Matches a universal character code that isn't the correct size, or uses incorrect characters. */
case 13:
#line 229 "src/Slice/Scanner.l"
case 14:
YY_RULE_SETUP
#line 229 "src/Slice/Scanner.l"
{
    unit->error("unknown escape sequence in string literal: `" + string(yytext) + "'");
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += yytext;
}
	YY_BREAK
/* Matches an unescaped newline in a string literal, and issues an error. */
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 237 "src/Slice/Scanner.l"
{
    yy_pop_state();
    endLocation(yylloc);
    nextLine();

    unit->error("encountered un-escaped EOL while scanning a string literal.");
    return ICE_STRING_LITERAL;
}
	YY_BREAK
/* Matches an unknown escape value. This rule has a lower priority than all the other escape rules because
   * it only matches 2 characters (the lowest any match), and it's beneath the others. */
case 16:
YY_RULE_SETUP
#line 248 "src/Slice/Scanner.l"
{
    unit->warning(All, "unknown escape sequence in string literal: `" + string(yytext) + "'");

    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    // Escape the entire sequence.
    str->literal += yytext;
    str->v += "\\" + string(yytext);
}
	YY_BREAK
/* Matches a dangling backslash, with nothing to escape. This rule is mostly included for grammar completeness. */
case 17:
YY_RULE_SETUP
#line 258 "src/Slice/Scanner.l"
{
    unit->warning(All, "dangling backslash in string literal");
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
}
	YY_BREAK
/* Matches the end of a double-quoted string literal, but only while scanning a string literal. Flex always prefers
   * to match the longest string it can, so quotes preceeded with a literal '\' will match the rules above this one. */
case 18:
YY_RULE_SETUP
#line 266 "src/Slice/Scanner.l"
{
    yy_pop_state();
    endLocation(yylloc);

    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    return ICE_STRING_LITERAL;
}
	YY_BREAK
/* Matches EOF, but only while scanning a string literal. */
case YY_STATE_EOF(STRING_LITERAL):
#line 276 "src/Slice/Scanner.l"
{
    yy_pop_state();
    endLocation(yylloc);

    unit->error("encountered EOF while scanning a string literal");
    return ICE_STRING_LITERAL;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 284 "src/Slice/Scanner.l"
{
    setLocation(yylloc);

    IntegerTokPtr itp = new IntegerTok;
    itp->literal = string(yytext);
    *yylval = itp;
    if(!IceUtilInternal::stringToInt64(string(yytext), itp->v))
    {
        assert(itp->v != 0);
        unit->error("integer constant `" + string(yytext) + "' out of range");
    }
    return ICE_INTEGER_LITERAL;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 298 "src/Slice/Scanner.l"
{
    setLocation(yylloc);

    errno = 0;
    FloatingTokPtr ftp = new FloatingTok;
    *yylval = ftp;
    string literal(yytext);
    ftp->literal = literal;
    char lastChar = literal[literal.size() - 1];
    if(lastChar == 'f' || lastChar == 'F')
    {
        literal = literal.substr(0, literal.size() - 1);    // Clobber trailing 'f' or 'F' suffix
    }
    ftp->v = strtod(literal.c_str(), 0);
    if((ftp->v == HUGE_VAL || ftp->v == -HUGE_VAL) && errno == ERANGE)
    {
        unit->error("floating-point constant `" + string(yytext) + "' too large (overflow)");
    }
    else if(ftp->v == 0 && errno == ERANGE)
    {
        unit->error("floating-point constant `" + string(yytext) + "' too small (underflow)");
    }
    return ICE_FLOATING_POINT_LITERAL;
}
	YY_BREAK
/* ========== Comments ========== */
/* Matches and records a triple-slash style doc comment. */
case 21:
YY_RULE_SETUP
#line 326 "src/Slice/Scanner.l"
{
    unit->addToComment(yytext + 3);
}
	YY_BREAK
/* Matches and consumes a C++ style comment. */
case 22:
YY_RULE_SETUP
#line 331 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Matches the start of a C style comment, and switches the scanner to the C_COMMENT state. */
case 23:
YY_RULE_SETUP
#line 334 "src/Slice/Scanner.l"
{
    yy_push_state(C_COMMENT);
}
	YY_BREAK
/* Matches any character except for newlines and adds them to the comments. '*' are matched one at a time to ensure
   * Flex scans '* /' correctly. Flex prioritizes longer matches over shorter ones, so '* /' will match before '*'. */
case 24:
#line 341 "src/Slice/Scanner.l"
case 25:
YY_RULE_SETUP
#line 341 "src/Slice/Scanner.l"
{
    yymore();
}
	YY_BREAK
/* Matches as many newlines as are available and adds them to the comment, after incrementing the line count. */
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 346 "src/Slice/Scanner.l"
{
    nextLine(yyleng);
    yymore();
}
	YY_BREAK
/* Matches the end of a C style comment, and reverts the scanner state to what it previously was. */
case 27:
YY_RULE_SETUP
#line 352 "src/Slice/Scanner.l"
{
    yy_pop_state();

    string comment(yytext);
    // The last 2 characters are the '*/' matched by this rule.
    unit->setComment(comment.substr(0, yyleng - 2));
}
	YY_BREAK
/* Handles reaching EOF while scanning a C style comment by issuing a warning but continuing normally. */
case YY_STATE_EOF(C_COMMENT):
#line 361 "src/Slice/Scanner.l"
{
    yy_pop_state();

    unit->error("encountered EOF while scanning a comment");
    unit->setComment(yytext);
}
	YY_BREAK
/* ========== Preprocessor Statements ========== */
/* Matches the empty preprocessor directive. */
case 28:
YY_RULE_SETUP
#line 371 "src/Slice/Scanner.l"
{
    yy_push_state(PREPROCESS);
}
	YY_BREAK
/* Matches a line preprocessor directive, but missing a line number. */
case 29:
YY_RULE_SETUP
#line 376 "src/Slice/Scanner.l"
{
    yy_push_state(PREPROCESS);
    unit->error("missing line number in line preprocessor directive");
}
	YY_BREAK
/* Matches a line preprocessor directive (optionally with a file specified afterwards). */
case 30:
#line 383 "src/Slice/Scanner.l"
case 31:
YY_RULE_SETUP
#line 383 "src/Slice/Scanner.l"
{
    int includeAction = scanPosition(yytext);
    if(yylineno == 0 || includeAction == 1) // Push: Indicated the scanner has started scanning a new file.
    {
        yy_push_state(INITIAL);
    }
    else if(includeAction == 2) // Pop: Indicates the scanner has completed scanning a new file.
    {
        yy_pop_state();
    }
    yy_push_state(PREPROCESS);
}
	YY_BREAK
/* Matches any non white-space character. This is a catch-all to report any invalid characters
   * found while scanning a preprocessor directive. */
case 32:
YY_RULE_SETUP
#line 398 "src/Slice/Scanner.l"
{
    unit->error("encountered unexpected token while scanning preprocessor directive: `" + string(yytext) + "'");
}
	YY_BREAK
/* Matches a new-line character or EOF. This signals the end of the preprocessor statement. */
case 33:
/* rule 33 can match eol */
#line 404 "src/Slice/Scanner.l"
YY_RULE_SETUP
case YY_STATE_EOF(PREPROCESS):
#line 404 "src/Slice/Scanner.l"
{
    yy_pop_state();
    nextLine();
}
	YY_BREAK
/* ========== Metadata ========== */
case 34:
YY_RULE_SETUP
#line 411 "src/Slice/Scanner.l"
{
    yy_push_state(METADATA);
    return ICE_LOCAL_METADATA_OPEN;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 416 "src/Slice/Scanner.l"
{
    yy_push_state(METADATA);

    // We use a different token to indicate metadata that should be ignored (if it came after a slice definition).
    if(yy_top_state() == PRE_SLICE)
    {
        return ICE_FILE_METADATA_OPEN;
    }
    else
    {
        return ICE_FILE_METADATA_IGNORE;
    }
}
	YY_BREAK
/* Matches the start of a metadata string, ensures the scanner is in QUOTED_METADATA mode,
   * then starts scanning a string literal. */
case 36:
YY_RULE_SETUP
#line 432 "src/Slice/Scanner.l"
{
    BEGIN(QUOTED_METADATA);
    yy_push_state(STRING_LITERAL);
    startLocation(yylloc);

    StringTokPtr str = new StringTok;
    str->literal = "\"";
    *yylval = str;
}
	YY_BREAK
/* Matches commas between string literals in quoted metadata and forwards them to the parser. */
case 37:
YY_RULE_SETUP
#line 443 "src/Slice/Scanner.l"
{
    return yytext[0];
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 447 "src/Slice/Scanner.l"
{
    yy_pop_state();
    return ICE_LOCAL_METADATA_CLOSE;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 452 "src/Slice/Scanner.l"
{
    yy_pop_state();
    return ICE_FILE_METADATA_CLOSE;
}
	YY_BREAK
/* Matches the start of unquoted metadata and switches the scanner into UNQUOTED_METADATA mode. */
case 40:
YY_RULE_SETUP
#line 458 "src/Slice/Scanner.l"
{
    BEGIN(UNQUOTED_METADATA);
    startLocation(yylloc);

    StringTokPtr str = new StringTok;
    str->literal = yytext;
    str->v = yytext;
    *yylval = str;
}
	YY_BREAK
/* Matches unquoted text in UNQUOTED_METADATA mode. */
case 41:
YY_RULE_SETUP
#line 469 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylval);
    str->literal += yytext;
    str->v += yytext;
}
	YY_BREAK
/* Matches the end of unquoted metadata, and places the ']' back into the stream. */
case 42:
YY_RULE_SETUP
#line 476 "src/Slice/Scanner.l"
{
    BEGIN(METADATA);
    yyless(0);
    return ICE_STRING_LITERAL;
}
	YY_BREAK
/* Matches and consumes newlines in between metadata after incrementing the line count. */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 483 "src/Slice/Scanner.l"
{
    nextLine(yyleng);
}
	YY_BREAK
/* Matches any characters not matched by another metadata rule (except whitespace), and reports an error. */
case 44:
YY_RULE_SETUP
#line 488 "src/Slice/Scanner.l"
{
    unit->error("invalid character between metadata");
}
	YY_BREAK
/* ========== Identifiers and Keywords ========== */
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 494 "src/Slice/Scanner.l"
{
    StringTokPtr ident = new StringTok;
    ident->v = *yytext == '\\' ? yytext + 1 : yytext;
    ident->v.erase(ident->v.find_first_of(" \t\v\n\r\f("));
    *yylval = ident;
    if(*yytext == '\\')
    {
        if(checkIsScoped(ident->v) == ICE_SCOPED_IDENTIFIER)
        {
            unit->error("Operation identifiers cannot be scoped: `" + (ident->v) + "'");
        }
        return ICE_IDENT_OPEN;
    }
    int st = checkKeyword(ident->v);
    if(st == ICE_IDENTIFIER)
    {
        return ICE_IDENT_OPEN;
    }
    else if(st == ICE_SCOPED_IDENTIFIER)
    {
        unit->error("Operation identifiers cannot be scoped: `" + (ident->v) + "'");
        return ICE_IDENT_OPEN;
    }
    else if(st == ICE_TAG)
    {
        return ICE_TAG_OPEN;
    }
    else if(st == ICE_OPTIONAL)
    {
        return ICE_OPTIONAL_OPEN;
    }
    else
    {
        return ICE_KEYWORD_OPEN;
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 531 "src/Slice/Scanner.l"
{
    StringTokPtr ident = new StringTok;
    ident->v = *yytext == '\\' ? yytext + 1 : yytext;
    *yylval = ident;
    return *yytext == '\\' ? checkIsScoped(ident->v) : checkKeyword(ident->v);
}
	YY_BREAK
/* ========== Whitespace ========== */
/* Matches and consumes any whitespace, except for newlines. */
case 47:
YY_RULE_SETUP
#line 541 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Matches and consumes newlines, but only when the scanner isn't in a sub-scanner. */
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 544 "src/Slice/Scanner.l"
{
    nextLine(yyleng);
}
	YY_BREAK
/* ========== Others ========== */
/* Matches and consumes a BOM, but only when the scanner has just started scanning a new file. */
case 49:
YY_RULE_SETUP
#line 551 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Matches invalid characters, one at a time to make this the 2nd lowest priority rule. All printable ASCII
   * characters are valid (those between 32 and 127 inclusively), anything outside this range is invalid. */
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 555 "src/Slice/Scanner.l"
{
    stringstream s;
    s << "illegal input character: '\\";
    s.width(3);
    s.fill('0');
    s << oct << static_cast<int>(static_cast<unsigned char>(yytext[0]));
    s << "'";

    unit->error(s.str());
    return BAD_CHAR;
}
	YY_BREAK
/* Matches any valid character (except newlines) not matched by another rule and fowards it to the parser.
   * This is the lowest priority rule in the scanner, and is only active while not in a sub-scanner. */
case 51:
YY_RULE_SETUP
#line 569 "src/Slice/Scanner.l"
{
    setLocation(yylloc);
    return yytext[0];
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 574 "src/Slice/Scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2266 "src/Slice/Scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PRE_SLICE):
case YY_STATE_EOF(SLICE):
case YY_STATE_EOF(METADATA):
case YY_STATE_EOF(QUOTED_METADATA):
case YY_STATE_EOF(UNQUOTED_METADATA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 229 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 229 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 228);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  _new_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
    static void yy_pop_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
    static int yy_top_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current token.
 * 
 */

/* %if-reentrant */
/* %endif */

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 574 "src/Slice/Scanner.l"


namespace Slice
{

// Check if an identifier looks like a keyword.
// If the identifier is a keyword, return the
// corresponding keyword token; otherwise, return
// an identifier token.
int checkKeyword(string& id)
{
    const auto pos = keywordMap.find(id);
    if(pos != keywordMap.end())
    {
        if(pos->first != id)
        {
            unit->error("illegal identifier: `" + id + "' differs from keyword `" + pos->first +
                        "' only in capitalization");
            id = pos->first;
        }
        return pos->second;
    }
    return checkIsScoped(id);
}

// Checks if an identifier is scoped or not, and returns the corresponding token.
int checkIsScoped(const string& id)
{
    return id.find("::") == string::npos ? ICE_IDENTIFIER : ICE_SCOPED_IDENTIFIER;
}

}

namespace
{

void nextLine(int count)
{
    yylineno += count;
    yycolno = 0;
}

int scanPosition(const char* s)
{
    string line(s);
    // Skip the leading '#', optional 'line', and any whitespace before the line number.
    string::size_type idx = line.find_first_not_of(" \t\r", (line.find('#') + 1));
    if(line.find("line", idx) == idx)
    {
        idx = line.find_first_not_of(" \t\r", (idx + 4));
    }
    line.erase(0, idx);

    // Read the line number
    yylineno = stoi(line.c_str(), &idx) - 1;

    // Scan the remainder of the line for a filename.
    idx = line.find_first_not_of(" \t\r", idx);
    line.erase(0, idx);

    int lineTypeCode = 0;
    if(!line.empty())
    {
        if(line[0] == '"')
        {
            string::size_type edx = line.rfind('"');
            if(edx != string::npos)
            {
                line = line.substr(1, edx - 1);
            }
            else
            {
                unit->error("mismatched quotations in line directive");
                line = line.substr(1);
            }
        }
        lineTypeCode = unit->setCurrentFile(line, yylineno);
        yyfilename = make_shared<string>(move(line));
    }
    return lineTypeCode;
}

void setLocation(TokenContext* location)
{
    startLocation(location);
    endLocation(location);
}

void startLocation(TokenContext* location)
{
    location->firstLine = yylineno;
    // The string has already been scanned, so the scanner is positioned at the end of it.
    location->firstColumn = yycolno - yyleng;
    location->filename = yyfilename;
}

void endLocation(TokenContext* location)
{
    location->lastLine = yylineno;
    location->lastColumn = yycolno;
}

// This function is always called once, right before scanning begins.
void initScanner()
{
    // Ensure the scanner starts at line number 1, column position 0.
    yylineno = 1;

    keywordMap = {
        {"module", ICE_MODULE},
        {"class", ICE_CLASS},
        {"interface", ICE_INTERFACE},
        {"exception", ICE_EXCEPTION},
        {"struct", ICE_STRUCT},
        {"sequence", ICE_SEQUENCE},
        {"dictionary", ICE_DICTIONARY},
        {"enum", ICE_ENUM},
        {"out", ICE_OUT},
        {"extends", ICE_EXTENDS},
        {"implements", ICE_IMPLEMENTS},
        {"throws", ICE_THROWS},
        {"void", ICE_VOID},
        {"bool", ICE_BOOL},
        {"byte", ICE_BYTE},
        {"short", ICE_SHORT},
        {"ushort", ICE_USHORT},
        {"int", ICE_INT},
        {"uint", ICE_UINT},
        {"varint", ICE_VARINT},
        {"varuint", ICE_VARUINT},
        {"long", ICE_LONG},
        {"ulong", ICE_ULONG},
        {"varlong", ICE_VARLONG},
        {"varulong", ICE_VARULONG},
        {"float", ICE_FLOAT},
        {"double", ICE_DOUBLE},
        {"string", ICE_STRING},
        {"Object", ICE_OBJECT},
        {"const", ICE_CONST},
        {"false", ICE_FALSE},
        {"true", ICE_TRUE},
        {"idempotent", ICE_IDEMPOTENT},
        {"tag", ICE_TAG},
        // 'optional' is kept as an alias for 'tag' for backwards compatibility.
        // We need a separate token type since we infer 'optional T' to mean 'tag T?'.
        // For 'tag' we require an optional type. No auto-conversion is done.
        {"optional", ICE_OPTIONAL},
        {"Value", ICE_VALUE}
    };
}

// This function is always called directly after a match has been made, but directly before it's action block is run.
void preAction()
{
    yycolno += yyleng;

    // We only use the 'INITIAL' state to consume BOMs, which can only validly be the first match in a file. This
    // function being called means a match has already been made, so we switch states since BOMs are no longer valid.
    if(YY_START == INITIAL)
    {
        BEGIN(PRE_SLICE);
    }
}

// This function is called whenever the scanner encounters an unrecoverable error.
void yynoreturn fatalError(const char* msg)
{
    cerr << *yyfilename << ":" << yylineno << ":" << yycolno << ": fatal  error: " << msg << endl
         << "\tlast matched text: `" << yytext << "'" << endl
         << "\tlast scanner state: `" << YY_START << "'" << endl;
    exit(YY_EXIT_FAILURE);
}

}

